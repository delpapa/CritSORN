####
# Script for the sixth paper figure
# Includes: noise-ABCD-noise
####

from pylab import * 

import tables
import os
from tempfile import TemporaryFile

import data_analysis as analysis

# work around to run powerlaw package [Alstott et al. 2014]
import sys
sys.path.append('/home/delpapa/lib/python2.7/site-packages')
sys.path.append('/home/delpapa/lib/python2.7/site-packages/mpmath')
import powerlaw as pl

section_steps = 2e6
extrainput_steps = 2000

number_of_files = 2 ############################### change back the folder as well, and the name of the final file
experiment_folder = 'Noise_Random(0.1)PlasticityBigGain'
## 'Noise_Random(0.02)PlasticityMoreLetters' - No effect, too weak input
## 'Noise_Random(0.05)PlasticityMoreLetters' - Small effect, but it doesnt look like a power-laws after readaptation
## 'Noise_Random(0.05)PlasticityMoreLettersBigGain' - This kind of works....
## 'Noise_Random(0.1)Plasticity' - Kind of works, but the gain is too small
## 'Noise_Random(0.1)PlasticityNoNoise' - Weird bursts activity..no reason to go there
## 'Noise_Random(0.1)PlasticityBigGain' - 
## 'Noise_Random(0.1)PlasticityBigGainStructured' - 

possible_regimes = ['normal', 'extrainput_start', 'extrainput_end']

### figure parameters
width  =  7
height = 3
fig_6 = figure(1, figsize=(width, height))

letter_size = 10
letter_size_panel = 12
line_width = 1.5
line_width_fit = 2.0
subplot_letter = (-0.15, 0.9)

########################################################################
# Fig. 1A,B: Gaussian Noise + ABCD + Gaussian Noise

for regime in possible_regimes:
    
    print '\n', regime, '...'
    if regime == 'extrainput_start':
        data_all = zeros((number_of_files, extrainput_steps))
    elif regime == 'extrainput_end':
        data_all = zeros((number_of_files, section_steps-extrainput_steps))
    elif regime == 'normal':
        data_all = zeros((number_of_files, section_steps))
    
    for result_file in xrange(number_of_files):

        exper = 'result.h5'
        exper_path =  '../Avalanche_Experiments/Extra_Input/' + \
                                                   experiment_folder + \
                                   '/' + str(result_file+1) + '/common/'
        h5 = tables.openFile(os.path.join(exper_path,exper),'r')
        data = h5.root
        
        if regime == 'normal':
            data_all[result_file] = np.around(data.activity[0] \
                             [section_steps:2*section_steps]*data.c.N_e)                   
        if regime == 'extrainput_start':
            data_all[result_file] = np.around(data.activity[0] \
                           [2*section_steps:2*section_steps + extrainput_steps]*data.c.N_e)                                                                                                             
  
        if regime == 'extrainput_end':
            data_all[result_file] = np.around(data.activity[0] \
                           [2*section_steps + extrainput_steps:]*data.c.N_e)                                                                                                             
        h5.close()

    ### Fig3 : Plot activity distribution
    figure(3)
    act_density = zeros((number_of_files, data_all.max()+1))    
    for data_file in xrange(number_of_files):
        
        steps = section_steps
        if regime == 'extrainput_start':
            steps = extrainput_steps
        if regime == 'extrainput_end':
            steps = section_steps-extrainput_steps
        for i in xrange(int(steps)):
            act_density[data_file, data_all[data_file, i]] += 1
        act_density[data_file, :] /= act_density[data_file, :].sum()

    act_density_mean = act_density.mean(0)
    if regime == 'normal':
        plot(act_density_mean, 'b')
    if regime == 'extrainput_start':
        plot(act_density_mean, 'r')
    if regime == 'extrainput_end':
        plot(act_density_mean, 'g')    
        
    figure(1)
    ###

    ### Fig2 : Plot activity for the extrainput_start
    figure(2)

    if regime == 'normal':
        plot(data_all[1][-extrainput_steps:], 'b')

    if regime == 'extrainput_start':
        plot(data_all[1], 'r') 
        
    figure(1)
    ###


    print 'Mean =', data_all.mean()
    print 'Std =', data_all.std()
               
    if regime == 'normal':    
        Thres_normal = int(data_all.mean()/2.)
        T_data, S_data = analysis.avalanches(data_all, 'N', '200', \
                                                       Threshold=Thres_normal)
    ### 25: no
    ### 20: better for end, nogo for start                                                   
    if regime == 'extrainput_start':    
        Thres_start = 20
        T_data, S_data = analysis.avalanches(data_all, 'N', '200', \
                                                        Threshold=Thres_start)                               
    if regime == 'extrainput_end':  
        Thres_end = int(data_all.mean()/2.+10)
        T_data, S_data = analysis.avalanches(data_all, 'N', '200', \
                                                        Threshold=Thres_end)    
                                                                                                
    figure(1)
    fig_6a = subplot(121)
    if regime == 'normal':
        pl.plot_pdf(T_data, color='k', linewidth = line_width_fit)
    if regime == 'extrainput_start':
        pl.plot_pdf(T_data, color='r', linewidth = line_width)         
    if regime == 'extrainput_end':
        pl.plot_pdf(T_data, color='gray', linewidth = line_width_fit)

    fig_6b = subplot(122)
    if regime == 'normal':
        pl.plot_pdf(S_data, color='k', linewidth = line_width_fit, label='SORN')
    if regime == 'extrainput_start':
        pl.plot_pdf(S_data, color='r', linewidth = line_width, \
                                                    label='Input onset')        
    if regime == 'extrainput_end':
        pl.plot_pdf(S_data, color='gray', linewidth = line_width_fit, label = 'Readaptation') 


subplot(121)
xscale('log'); yscale('log')
xlabel(r'$T$', fontsize=letter_size)
ylabel(r'$f(T)$', fontsize=letter_size) 
fig_6a.spines['right'].set_visible(False)
fig_6a.spines['top'].set_visible(False)
fig_6a.tick_params(axis=u'both', which=u'both',length=0)

xlim([1, 300])
ylim([0.0001, 1])
xticks([1, 10, 100], ['$10^0$', '$10^{1}$', '$10^{2}$'])
yticks([1, 0.01, 0.0001], ['$10^0$', '$10^{-2}$', '$10^{-4}$'])
tick_params(axis='both', which='major', labelsize=letter_size)                

              
subplot(122)
xscale('log'); yscale('log')	 
xlabel(r'$S$', fontsize=letter_size)
ylabel(r'$f(S)$', fontsize=letter_size)
fig_6b.spines['right'].set_visible(False)
fig_6b.spines['top'].set_visible(False)
fig_6b.tick_params(axis=u'both', which=u'both',length=0)

xlim([1, 3000])
ylim([0.00001, 0.1])
xticks([1, 10, 100, 1000], \
     ['$10^0$', '$10^{1}$', '$10^{2}$', '$10^{3}$'])
yticks([0.1, 0.001, 0.00001],\
            ['$10^{-1}$', '$10^{-3}$', '$10^{-5}$'])
legend(loc=(0.5, 0.8), prop={'size':letter_size}, frameon=False)

########################################################################
fig_6a.annotate('A', xy=subplot_letter, xycoords='axes fraction', \
                fontsize=letter_size_panel ,  fontweight='bold', \
                horizontalalignment='right', verticalalignment='bottom') 
fig_6b.annotate('B', xy=subplot_letter, xycoords='axes fraction', \
                fontsize=letter_size_panel ,  fontweight='bold', \
                horizontalalignment='right', verticalalignment='bottom') 
                
gcf().subplots_adjust(bottom=0.17)
fig_6.subplots_adjust(wspace=.4) 
 
print 'Saving figures...',		
result_path = '../Avalanche_Results/'
result_name_png = 'CRITSORN_Fig6_' + experiment_folder + '.pdf'
savefig(os.path.join(result_path, result_name_png), format = 'pdf')
figure(2)
result_path = '../Avalanche_Results/'
result_name_png = 'CRITSORN_Fig6_' + experiment_folder + '_activity.pdf'
savefig(os.path.join(result_path, result_name_png), format = 'pdf')
